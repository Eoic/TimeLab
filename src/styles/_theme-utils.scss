// Theme utilities and mixins

// Mixin for smooth theme transitions.
@mixin theme-transition($properties: all, $duration: var(--transition-normal)) {
    transition: #{$properties} #{$duration};
}

// Mixin for theme-aware focus states using smooth box-shadow rings.
// Uses an inner ring matching the background to create spacing, then the visible ring.
@mixin focus-ring($color: var(--color-border-focus), $ringWidth: 2px, $gapWidth: 2px) {
    outline: none;
    box-shadow:
        0 0 0 #{$gapWidth} var(--color-bg-primary),
        0 0 0 calc(#{$gapWidth} + #{$ringWidth}) #{$color};
}

// Apply consistent transition for focusable elements.
@mixin focusable-transition() {
    transition:
        background-color var(--transition-normal),
        border-color var(--transition-normal),
        color var(--transition-normal),
        box-shadow var(--transition-focus);
}

// Mixin for elevated surfaces.
@mixin surface-elevation($level: 1) {
    @if $level == 1 {
        background-color: var(--color-surface-raised);
        box-shadow: var(--shadow-sm);
    } @else if $level == 2 {
        background-color: var(--color-surface-raised);
        box-shadow: var(--shadow-md);
    } @else if $level == 3 {
        background-color: var(--color-surface-raised);
        box-shadow: var(--shadow-lg);
    } @else if $level == 4 {
        background-color: var(--color-surface-raised);
        box-shadow: var(--shadow-xl);
    }
}

// Mixin for interactive states.
// Adds hover and active support, plus optional border-color transitions.
@mixin interactive-states(
    $base-bg: var(--color-primary),
    $hover-bg: var(--color-primary-hover),
    $focus-color: var(--color-border-focus),
    $base-color: null,
    $hover-color: null,
    $active-bg: null,
    $active-color: null,
    $base-border: null,
    $hover-border: null,
    $active-border: null
) {
    background-color: #{$base-bg};
    @if $base-color {
        color: #{$base-color};
    }
    @if $base-border {
        border-color: #{$base-border};
    }
    @include theme-transition('background-color, color, border-color, box-shadow');

    &:hover {
        background-color: #{$hover-bg};
        @if $hover-color {
            color: #{$hover-color};
        }
        @if $hover-border {
            border-color: #{$hover-border};
        }
    }

    // Active/pressed states
    &:active,
    &.is-active,
    &[aria-pressed='true'],
    &[data-state='on'],
    &[data-pressed='true'] {
        @if $active-bg {
            background-color: #{$active-bg};
        }
        @if $active-color {
            color: #{$active-color};
        }
        @if $active-border {
            border-color: #{$active-border};
        }
    }

    &:focus,
    &:focus-visible {
        @include focus-ring($focus-color);
    }

    &:disabled,
    &[aria-disabled='true'] {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;

        &:hover {
            background-color: #{$base-bg};
            @if $base-color {
                color: #{$base-color};
            }
            @if $base-border {
                border-color: #{$base-border};
            }
        }
    }
}

// Utility class for theme transitions.
.theme-transition {
    @include theme-transition();
}

// Utility classes for different surface elevations.
.surface-flat {
    background-color: var(--color-bg-primary);
}

.surface-raised {
    @include surface-elevation(1);
}

.surface-elevated {
    @include surface-elevation(2);
}

.surface-floating {
    @include surface-elevation(3);
}

.surface-modal {
    @include surface-elevation(4);
}

// Text color utilities.
.text-primary {
    color: var(--color-text-primary);
}

.text-secondary {
    color: var(--color-text-secondary);
}

.text-tertiary {
    color: var(--color-text-tertiary);
}

.text-muted {
    color: var(--color-text-muted);
}

.text-inverse {
    color: var(--color-text-inverse);
}

// Background color utilities.
.bg-primary {
    background-color: var(--color-bg-primary);
}

.bg-secondary {
    background-color: var(--color-bg-secondary);
}

.bg-tertiary {
    background-color: var(--color-bg-tertiary);
}

.bg-surface-raised {
    background-color: var(--color-surface-raised);
}

.bg-surface-sunken {
    background-color: var(--color-surface-sunken);
}

// Border utilities.
.border-primary {
    border: 1px solid var(--color-border-primary);
}

.border-secondary {
    border: 1px solid var(--color-border-secondary);
}

.border-focus {
    border: 1px solid var(--color-border-focus);
}
